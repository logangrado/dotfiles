#!/bin/bash

function relation() {
    # Determine the relation between two branches, A and B.
    #
    # 'ancestor' means B is an ancestor of A

    BRANCH_A=$1
    BRANCH_B=$2
    SHA_A=$(git rev-parse $BRANCH_A)
    SHA_B=$(git rev-parse $BRANCH_B)

    if [[ $BRANCH_A == $BRANCH_B ]]; then
        echo "same"
    elif git rev-list $SHA_A | grep -q $SHA_B; then
        echo "ancestor"
    elif git rev-list $SHA_B | grep -q $SHA_A; then
        echo "child"
    else
        echo "unrelated"
    fi
}

function all_local_branches() {
    echo $(git for-each-ref --format='%(refname:short)' refs/heads/)
}

function all_branches() {
    # This allows all local and remotes
    echo $(git for-each-ref --format='%(refname:short)' refs/)
}

function all_children() {
    # Return a list of all children branches of the current branches
    for BRANCH in $(all_local_branches); do
        RELATION=$(relation $1 $BRANCH)
        if [[ $RELATION = "child" ]]; then
            echo $BRANCH
        fi
    done
}

function all_direct_children() {
    PARENT=$1
    ALL_CHILDREN=$(all_children $PARENT)
    for CHILD in $ALL_CHILDREN; do
        DIRECT_CHILD=1  # Assume we are a direct child to start
        for OTHER_CHILD in $ALL_CHILDREN; do
            if [[ $CHILD != $OTHER_CHILD ]]; then
                OTHER_SHA=$(git rev-parse $OTHER_CHILD)
                # Skip one, so that branches on the same commit as the child don't interfere
                if git rev-list $CHILD --skip=1 | grep -q $OTHER_SHA; then
                    DIRECT_CHILD=0
                fi
            fi
        done
        if [[ $DIRECT_CHILD = 1 ]]; then
            echo $CHILD
        fi
    done
}

function recursive_rebase_tree() {
    local TO=$1
    local FROM=$2
    local INDENT="  $3"
    echo "${INDENT}$TO <- $FROM"
    if [[ $(relation $TO $FROM) = "child" ]]; then
        echo "${INDENT}  '${FROM}' is already a child of '${TO}', nothing to do"
    else
        local CHILDREN=$(all_direct_children $FROM)
        
        if [[ $DRY_RUN = 0 ]]; then
            (git rebase $TO $FROM) # Parens puts the rebase in a subshell, so (hopefully) we continue the rebase-tree
                                   # after resolving conflicts
        fi
        for CHILD in $CHILDREN; do
            recursive_rebase_tree $FROM $CHILD "$INDENT"
        done
    fi
}

function usage() {
    cat << EOF
Usage:  
  $(basename $0) TO FROM

Rebase FROM onto TO, as well as all children of FROM

Options:
  -d, --dry-run     Perform dry run
EOF
}

function parse_args() {
    DRY_RUN=0
    while (( "$#" )); do
        case "$1" in
            -d|--dry-run)
                DRY_RUN=1
                shift;;
            -*|--*=)
                echo "Error: Unsupported flag $1" >&2
                exit 2
                ;;
            *)
                break
                ;;
        esac        
    done

    # Check if we have FROM and TO
    if [[ $# != 2 ]]; then
       usage
       exit
    fi
    
    # Check number of positional arguments
    if [[ $# != 2 ]]; then
        usage
        exit 2
    fi

    TO=$1
    FROM=$2
    
    if [[ " $(all_branches) " != *" $TO "* ]]; then
        echo "Branch does not exist: '$TO'"
        echo
        usage
        exit 2
    fi
    if [[ " $(all_local_branches) " != *" $FROM "* ]]; then
        echo "Branch does not exist or is not local: '$FROM'"
        echo
        usage
        exit 2
    fi
}

function check_in_git_repo() {
    if ! git status > /dev/null 2>&1; then
        echo "Not in a git repository"
        exit 2
    fi
}

function main() {

    check_in_git_repo
    parse_args $@
    
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

    if [[ $DRY_RUN != 0 ]]; then
        echo "DRY RUN"
    fi

    echo "Rebasing tree: $TO <- $FROM"
    
    #git checkout $FROM > /dev/null 2>&1
    
    recursive_rebase_tree $TO $FROM

    #git checkout $CURRENT_BRANCH > /dev/null 2>&1

}

main $@
